
Prueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000b24  00000bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000228  00800106  00800106  00000bbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001123  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000978  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b7  00000000  00000000  000027d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000668  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000917  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_1>
   8:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_18>
  4c:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DescomponerDigitos>:
*/

//de la mano de  mi amigo ChatGPT
// Función para descomponer el número en dígitos
void DescomponerDigitos(int16_t numero)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
	if(numero<0) {
  b0:	99 23       	and	r25, r25
  b2:	4c f4       	brge	.+18     	; 0xc6 <DescomponerDigitos+0x20>
		numero = (-1)*numero;
  b4:	11 95       	neg	r17
  b6:	01 95       	neg	r16
  b8:	11 09       	sbc	r17, r1
		AgregarDatoBuffer('-');
  ba:	8d e2       	ldi	r24, 0x2D	; 45
  bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
*/

//de la mano de  mi amigo ChatGPT
// Función para descomponer el número en dígitos
void DescomponerDigitos(int16_t numero)
{
  c0:	c0 e1       	ldi	r28, 0x10	; 16
  c2:	d7 e2       	ldi	r29, 0x27	; 39
  c4:	1a c0       	rjmp	.+52     	; 0xfa <DescomponerDigitos+0x54>
	if(numero<0) {
		numero = (-1)*numero;
		AgregarDatoBuffer('-');
	}else{
		AgregarDatoBuffer('+');
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
  cc:	f9 cf       	rjmp	.-14     	; 0xc0 <DescomponerDigitos+0x1a>
	int16_t resto = numero;
	
	while (divisor >= 1)
	{
		digito = resto / divisor;
		resto = resto % divisor;
  ce:	c8 01       	movw	r24, r16
  d0:	be 01       	movw	r22, r28
  d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodhi4>
  d6:	46 2f       	mov	r20, r22
  d8:	8c 01       	movw	r16, r24
		divisor = divisor / 10;
  da:	9e 01       	movw	r18, r28
  dc:	ad ec       	ldi	r26, 0xCD	; 205
  de:	bc ec       	ldi	r27, 0xCC	; 204
  e0:	0e 94 6e 05 	call	0xadc	; 0xadc <__umulhisi3>
  e4:	ec 01       	movw	r28, r24
  e6:	d6 95       	lsr	r29
  e8:	c7 95       	ror	r28
  ea:	d6 95       	lsr	r29
  ec:	c7 95       	ror	r28
  ee:	d6 95       	lsr	r29
  f0:	c7 95       	ror	r28

		AgregarDatoBuffer(digito+48);
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	84 0f       	add	r24, r20
  f6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
	}
	uint16_t divisor = 10000;
	int8_t digito;
	int16_t resto = numero;
	
	while (divisor >= 1)
  fa:	20 97       	sbiw	r28, 0x00	; 0
  fc:	41 f7       	brne	.-48     	; 0xce <DescomponerDigitos+0x28>

		AgregarDatoBuffer(digito+48);
	}
	//AgregarDatoBuffer('\r');
	//AgregarDatoBuffer('\n');
	AgregarDatoBuffer('\0');
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <main>:
void DescomponerDigitos(int16_t numero);
void Timer0Init(void);

int main(void)
{
	Inicializacion_UART();
 10e:	0e 94 3c 04 	call	0x878	; 0x878 <Inicializacion_UART>
	DDRB |= (1<<PORTB1); //pongo PORTB1 como salida(luz)
 112:	84 b1       	in	r24, 0x04	; 4
 114:	82 60       	ori	r24, 0x02	; 2
 116:	84 b9       	out	0x04, r24	; 4

	PORTB |= (1<<PORTB1);//prendo la luz
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x20>
 12e:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<PORTB1);//apago la luz
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	85 b9       	out	0x05, r24	; 5
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	89 e6       	ldi	r24, 0x69	; 105
 13a:	98 e1       	ldi	r25, 0x18	; 24
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x2e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x38>
 146:	00 00       	nop
// 	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
// 	DDRD &= ~(1<<PORTD3);//pongo D3 como entrada
// 	PORTD |= (1<<PORTD3);//pongo D3 como pull up
// 	
// 	Timer0Init();
	SensorEncoder_init();
 148:	0e 94 86 01 	call	0x30c	; 0x30c <SensorEncoder_init>
	
	sei();
 14c:	78 94       	sei
	
	angulo = leerAngulo();
 14e:	0e 94 35 01 	call	0x26a	; 0x26a <leerAngulo>
 152:	ec 01       	movw	r28, r24
	
	AgregarDatosBuffer("Hola");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 84 04 	call	0x908	; 0x908 <AgregarDatosBuffer>
	DescomponerDigitos(angulo);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <DescomponerDigitos>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x5a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x64>
 172:	00 00       	nop
	PORTB |= (1<<PORTB1);//prendo la luz
	_delay_ms(500);
	PORTB &= ~(1<<PORTB1);//apago la luz
	_delay_ms(500);
	
	int16_t angulo = 0,anguloAnt=0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
// 			
// 		}
// 		angulo++;
// 		DescomponerDigitos(angulo);
		
		if(hayDato()){
 178:	0e 94 3a 01 	call	0x274	; 0x274 <hayDato>
			//AgregarDatoBuffer('a');
			//AgregarDatoBuffer('\0');
		}
		
		angulo = leerAngulo();
 17c:	0e 94 35 01 	call	0x26a	; 0x26a <leerAngulo>
		if (angulo != anguloAnt)
 180:	c8 17       	cp	r28, r24
 182:	d9 07       	cpc	r29, r25
 184:	09 f0       	breq	.+2      	; 0x188 <main+0x7a>
		{
			anguloAnt = angulo;
 186:	ec 01       	movw	r28, r24
			//DescomponerDigitos(angulo);
		}
		
		if (angulo >0){
 188:	18 16       	cp	r1, r24
 18a:	19 06       	cpc	r1, r25
 18c:	24 f4       	brge	.+8      	; 0x196 <main+0x88>
			PORTB &= ~(1<<PORTB1);//apago la luz
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 b9       	out	0x05, r24	; 5
 194:	f1 cf       	rjmp	.-30     	; 0x178 <main+0x6a>
		}else{
			PORTB |= (1<<PORTB1);//prendo la luz
 196:	85 b1       	in	r24, 0x05	; 5
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	ed cf       	rjmp	.-38     	; 0x178 <main+0x6a>

0000019e <DescomponerDigitosSinSigno32>:
	//AgregarDatoBuffer('\r');
	//AgregarDatoBuffer('\n');
	AgregarDatoBuffer('\0');
}

void DescomponerDigitosSinSigno32(uint32_t numero){
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	cf 93       	push	r28
 1b0:	4b 01       	movw	r8, r22
 1b2:	5c 01       	movw	r10, r24
	uint32_t divisor = 1000000000;
 1b4:	0f 2e       	mov	r0, r31
 1b6:	c1 2c       	mov	r12, r1
 1b8:	fa ec       	ldi	r31, 0xCA	; 202
 1ba:	df 2e       	mov	r13, r31
 1bc:	fa e9       	ldi	r31, 0x9A	; 154
 1be:	ef 2e       	mov	r14, r31
 1c0:	fb e3       	ldi	r31, 0x3B	; 59
 1c2:	ff 2e       	mov	r15, r31
 1c4:	f0 2d       	mov	r31, r0
	int8_t digito;
	uint32_t resto = numero;

	while (divisor >= 1)
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <DescomponerDigitosSinSigno32+0x58>
	{
		digito = resto / divisor;
		resto = resto % divisor;
 1c8:	c5 01       	movw	r24, r10
 1ca:	b4 01       	movw	r22, r8
 1cc:	a7 01       	movw	r20, r14
 1ce:	96 01       	movw	r18, r12
 1d0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodsi4>
 1d4:	c2 2f       	mov	r28, r18
 1d6:	4b 01       	movw	r8, r22
 1d8:	5c 01       	movw	r10, r24
		divisor = divisor / 10;
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	2a e0       	ldi	r18, 0x0A	; 10
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodsi4>
 1ea:	69 01       	movw	r12, r18
 1ec:	7a 01       	movw	r14, r20

		AgregarDatoBuffer(digito+48);
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	8c 0f       	add	r24, r28
 1f2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
void DescomponerDigitosSinSigno32(uint32_t numero){
	uint32_t divisor = 1000000000;
	int8_t digito;
	uint32_t resto = numero;

	while (divisor >= 1)
 1f6:	c1 14       	cp	r12, r1
 1f8:	d1 04       	cpc	r13, r1
 1fa:	e1 04       	cpc	r14, r1
 1fc:	f1 04       	cpc	r15, r1
 1fe:	21 f7       	brne	.-56     	; 0x1c8 <DescomponerDigitosSinSigno32+0x2a>

		AgregarDatoBuffer(digito+48);
	}
	//AgregarDatoBuffer('\r');
	//AgregarDatoBuffer('\n');
	AgregarDatoBuffer('\0');
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
}
 206:	cf 91       	pop	r28
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	bf 90       	pop	r11
 212:	af 90       	pop	r10
 214:	9f 90       	pop	r9
 216:	8f 90       	pop	r8
 218:	08 95       	ret

0000021a <DescomponerDigitosSinSigno>:

void DescomponerDigitosSinSigno(uint16_t numero){
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	8c 01       	movw	r16, r24
uint16_t divisor = 10000;
 224:	c0 e1       	ldi	r28, 0x10	; 16
 226:	d7 e2       	ldi	r29, 0x27	; 39
int8_t digito;
uint16_t resto = numero;

while (divisor >= 1)
 228:	16 c0       	rjmp	.+44     	; 0x256 <DescomponerDigitosSinSigno+0x3c>
{
	digito = resto / divisor;
	resto = resto % divisor;
 22a:	c8 01       	movw	r24, r16
 22c:	be 01       	movw	r22, r28
 22e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodhi4>
 232:	46 2f       	mov	r20, r22
 234:	8c 01       	movw	r16, r24
	divisor = divisor / 10;
 236:	9e 01       	movw	r18, r28
 238:	ad ec       	ldi	r26, 0xCD	; 205
 23a:	bc ec       	ldi	r27, 0xCC	; 204
 23c:	0e 94 6e 05 	call	0xadc	; 0xadc <__umulhisi3>
 240:	ec 01       	movw	r28, r24
 242:	d6 95       	lsr	r29
 244:	c7 95       	ror	r28
 246:	d6 95       	lsr	r29
 248:	c7 95       	ror	r28
 24a:	d6 95       	lsr	r29
 24c:	c7 95       	ror	r28

	AgregarDatoBuffer(digito+48);
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	84 0f       	add	r24, r20
 252:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
void DescomponerDigitosSinSigno(uint16_t numero){
uint16_t divisor = 10000;
int8_t digito;
uint16_t resto = numero;

while (divisor >= 1)
 256:	20 97       	sbiw	r28, 0x00	; 0
 258:	41 f7       	brne	.-48     	; 0x22a <DescomponerDigitosSinSigno+0x10>

	AgregarDatoBuffer(digito+48);
}
//AgregarDatoBuffer('\r');
//AgregarDatoBuffer('\n');
AgregarDatoBuffer('\0');
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <leerAngulo>:
	
	set_origen();
}

int16_t leerAngulo(){
	return angulo;
 26a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 26e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
}
 272:	08 95       	ret

00000274 <hayDato>:

uint8_t hayDato(){
	uint8_t copia = HayDato;
 274:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <HayDato>
	HayDato = 0;
 278:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <HayDato>
	return copia;
}
 27c:	08 95       	ret

0000027e <set_origen>:

void set_origen(){
	if (DER & IZQ) estado = UnoUno;
 27e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <DER>
 282:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <IZQ>
 286:	89 23       	and	r24, r25
 288:	19 f0       	breq	.+6      	; 0x290 <set_origen+0x12>
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if ((!DER) & IZQ) estado = CeroUno;
 290:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <DER>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	22 23       	and	r18, r18
 29a:	11 f0       	breq	.+4      	; 0x2a0 <set_origen+0x22>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <IZQ>
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	82 23       	and	r24, r18
 2a8:	93 23       	and	r25, r19
 2aa:	89 2b       	or	r24, r25
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <set_origen+0x36>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if (DER & (!IZQ)) estado = UnoCero;
 2b4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <DER>
 2b8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <IZQ>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	33 23       	and	r19, r19
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <set_origen+0x4a>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	82 23       	and	r24, r18
 2cc:	93 23       	and	r25, r19
 2ce:	89 2b       	or	r24, r25
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <set_origen+0x5a>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if ( (!DER) & (!IZQ)) estado = CeroCero;
 2d8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <DER>
 2dc:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <IZQ>
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	81 11       	cpse	r24, r1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	21 11       	cpse	r18, r1
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	89 23       	and	r24, r25
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <set_origen+0x76>
 2f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 2f4:	08 95       	ret

000002f6 <Timer2Init>:
}

void Timer2Init(void){
	//configuración del TOPE del contador TCNT0
	OCR2A=19;			//19+1
 2f6:	83 e1       	ldi	r24, 0x13	; 19
 2f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = (1<<WGM21); //modo CTC
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS21);	//CTC CLK/8 =16MHz/8 =2MHz
 302:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1<<OCIE2A); // habilitamos interrpución COMPA
 306:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 30a:	08 95       	ret

0000030c <SensorEncoder_init>:
void calcularDt();
void calcularDtMasTiempo();

void SensorEncoder_init(){
	//PORTD2 es INT0 es sensor derecha un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD2); //pongo B2 como entrada
 30c:	8a b1       	in	r24, 0x0a	; 10
 30e:	8b 7f       	andi	r24, 0xFB	; 251
 310:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pongo B2 como pull up
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	84 60       	ori	r24, 0x04	; 4
 316:	8b b9       	out	0x0b, r24	; 11
	
	//PORTD3 es INT1 es sensor izquierda un 1 en el sensor es que esta tapado
	DDRD &= ~(1<<PORTD3);//pongo B3 como entrada
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	87 7f       	andi	r24, 0xF7	; 247
 31c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD3);//pongo B3 como pull up
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	88 60       	ori	r24, 0x08	; 8
 322:	8b b9       	out	0x0b, r24	; 11
	
	Timer2Init();
 324:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Timer2Init>
	
	EIMSK |= (1<<INT0); //habilito INT0
 328:	8d b3       	in	r24, 0x1d	; 29
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
 32e:	e9 e6       	ldi	r30, 0x69	; 105
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
 338:	80 81       	ld	r24, Z
 33a:	8d 7f       	andi	r24, 0xFD	; 253
 33c:	80 83       	st	Z, r24
	//puse a INT0 para activarse cuando sube y cuando baja
	
	EIMSK |= (1<<INT1);//habilito INT1
 33e:	8d b3       	in	r24, 0x1d	; 29
 340:	82 60       	ori	r24, 0x02	; 2
 342:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10);
 344:	80 81       	ld	r24, Z
 346:	84 60       	ori	r24, 0x04	; 4
 348:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
 34a:	80 81       	ld	r24, Z
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	80 83       	st	Z, r24
	//puse a INT1 para activarse cuando sube y cuando baja
	
	
	set_origen();
 350:	0e 94 3f 01 	call	0x27e	; 0x27e <set_origen>
 354:	08 95       	ret

00000356 <calcularDtMasTiempo>:
	difAnt = dif;
	anterior = angulo;
}

void calcularDtMasTiempo(){
	dt = tiempoMedida - tiempoMedidaAnt;
 356:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tiempoMedida>
 35a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tiempoMedida+0x1>
 35e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <tiempoMedida+0x2>
 362:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <tiempoMedida+0x3>
 366:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <tiempoMedidaAnt>
 36a:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <tiempoMedidaAnt+0x1>
 36e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <tiempoMedidaAnt+0x2>
 372:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <tiempoMedidaAnt+0x3>
 376:	84 1b       	sub	r24, r20
 378:	95 0b       	sbc	r25, r21
 37a:	a6 0b       	sbc	r26, r22
 37c:	b7 0b       	sbc	r27, r23
 37e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dt>
 382:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <dt+0x1>
 386:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <dt+0x2>
 38a:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <dt+0x3>
	promdt = promdt/2 + dt/2;
 38e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <promdt>
 392:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <promdt+0x1>
 396:	99 23       	and	r25, r25
 398:	0c f4       	brge	.+2      	; 0x39c <calcularDtMasTiempo+0x46>
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	9c 01       	movw	r18, r24
 39e:	35 95       	asr	r19
 3a0:	27 95       	ror	r18
 3a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dt>
 3a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <dt+0x1>
 3aa:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <dt+0x2>
 3ae:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <dt+0x3>
 3b2:	b6 95       	lsr	r27
 3b4:	a7 95       	ror	r26
 3b6:	97 95       	ror	r25
 3b8:	87 95       	ror	r24
 3ba:	82 0f       	add	r24, r18
 3bc:	93 1f       	adc	r25, r19
 3be:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <promdt+0x1>
 3c2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <promdt>
	//if(promdt <2){
			velAng = (dif*100000)/promdt;			//dif siempre da 1 es solo para darle signo a dtvelAng = promdt*(difAnt);
 3c6:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <dif>
 3ca:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <dif+0x1>
 3ce:	20 ea       	ldi	r18, 0xA0	; 160
 3d0:	36 e8       	ldi	r19, 0x86	; 134
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulshisi3>
 3da:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <promdt>
 3de:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <promdt+0x1>
 3e2:	03 2e       	mov	r0, r19
 3e4:	00 0c       	add	r0, r0
 3e6:	44 0b       	sbc	r20, r20
 3e8:	55 0b       	sbc	r21, r21
 3ea:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divmodsi4>
 3ee:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <velAng+0x1>
 3f2:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <velAng>
 3f6:	08 95       	ret

000003f8 <calcularDt>:
	}*/
	//velAng = (100000*(dif))/promdt;
}

void calcularDt(){
	dt = tiempoMedida - tiempoMedidaAnt;
 3f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tiempoMedida>
 3fc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tiempoMedida+0x1>
 400:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <tiempoMedida+0x2>
 404:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <tiempoMedida+0x3>
 408:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <tiempoMedidaAnt>
 40c:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <tiempoMedidaAnt+0x1>
 410:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <tiempoMedidaAnt+0x2>
 414:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <tiempoMedidaAnt+0x3>
 418:	84 1b       	sub	r24, r20
 41a:	95 0b       	sbc	r25, r21
 41c:	a6 0b       	sbc	r26, r22
 41e:	b7 0b       	sbc	r27, r23
 420:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dt>
 424:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <dt+0x1>
 428:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <dt+0x2>
 42c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <dt+0x3>
	promdt = promdt/2 + dt/2;
 430:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <promdt>
 434:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <promdt+0x1>
 438:	99 23       	and	r25, r25
 43a:	0c f4       	brge	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	9c 01       	movw	r18, r24
 440:	35 95       	asr	r19
 442:	27 95       	ror	r18
 444:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dt>
 448:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <dt+0x1>
 44c:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <dt+0x2>
 450:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <dt+0x3>
 454:	b6 95       	lsr	r27
 456:	a7 95       	ror	r26
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	82 0f       	add	r24, r18
 45e:	93 1f       	adc	r25, r19
 460:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <promdt+0x1>
 464:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <promdt>
	dif = angulo - anterior;
 468:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 46c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 470:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <anterior>
 474:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <anterior+0x1>
 478:	82 1b       	sub	r24, r18
 47a:	93 0b       	sbc	r25, r19
 47c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <dif+0x1>
 480:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <dif>
	//if(promdt <2){
		velAng = (dif*100000)/promdt;			//dif siempre da 1 es solo para darle signo a dtvelAng = promdt*(difAnt);
 484:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <dif>
 488:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <dif+0x1>
 48c:	20 ea       	ldi	r18, 0xA0	; 160
 48e:	36 e8       	ldi	r19, 0x86	; 134
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	0e 94 7d 05 	call	0xafa	; 0xafa <__mulshisi3>
 498:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <promdt>
 49c:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <promdt+0x1>
 4a0:	03 2e       	mov	r0, r19
 4a2:	00 0c       	add	r0, r0
 4a4:	44 0b       	sbc	r20, r20
 4a6:	55 0b       	sbc	r21, r21
 4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divmodsi4>
 4ac:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <velAng+0x1>
 4b0:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <velAng>
 4b4:	08 95       	ret

000004b6 <mostrarDatos>:
	
	//velAng = (100000*(dif))/promdt;
}

void mostrarDatos(){
	if(EspacioDisponibleBuffer()>35){
 4b6:	0e 94 4e 04 	call	0x89c	; 0x89c <EspacioDisponibleBuffer>
 4ba:	84 97       	sbiw	r24, 0x24	; 36
 4bc:	90 f1       	brcs	.+100    	; 0x522 <mostrarDatos+0x6c>
		//muestra
		AgregarDatoBuffer('T');
 4be:	84 e5       	ldi	r24, 0x54	; 84
 4c0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
		DescomponerDigitosSinSigno32(tiempoMedida);
 4c4:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <tiempoMedida>
 4c8:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <tiempoMedida+0x1>
 4cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tiempoMedida+0x2>
 4d0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <tiempoMedida+0x3>
 4d4:	0e 94 cf 00 	call	0x19e	; 0x19e <DescomponerDigitosSinSigno32>
		AgregarDatoBuffer('A');
 4d8:	81 e4       	ldi	r24, 0x41	; 65
 4da:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
		DescomponerDigitos(angulo);
 4de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 4e2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 4e6:	0e 94 53 00 	call	0xa6	; 0xa6 <DescomponerDigitos>
		
		AgregarDatoBuffer('V');
 4ea:	86 e5       	ldi	r24, 0x56	; 86
 4ec:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
		DescomponerDigitos(velAng);
 4f0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <velAng>
 4f4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <velAng+0x1>
 4f8:	0e 94 53 00 	call	0xa6	; 0xa6 <DescomponerDigitos>
		AgregarDatoBuffer('d');
 4fc:	84 e6       	ldi	r24, 0x64	; 100
 4fe:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
		//DescomponerDigitos(anterior);
		DescomponerDigitosSinSigno(dt);
 502:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dt>
 506:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <dt+0x1>
 50a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <dt+0x2>
 50e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <dt+0x3>
 512:	0e 94 0d 01 	call	0x21a	; 0x21a <DescomponerDigitosSinSigno>
		
		AgregarDatoBuffer('\n');
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
		AgregarDatoBuffer('\0');
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
 522:	08 95       	ret

00000524 <__vector_7>:
	TCCR2A = (1<<WGM21); //modo CTC
	TCCR2B = (1<<CS21);	//CTC CLK/8 =16MHz/8 =2MHz
	TIMSK2 = (1<<OCIE2A); // habilitamos interrpución COMPA
}

ISR(TIMER2_COMPA_vect){ //interrupción periódica de periodo Tisr=20/2MHz=20us  o fisr=2MHz/20=10000kHz
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
	tiempo++;
 546:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tiempo>
 54a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tiempo+0x1>
 54e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tiempo+0x2>
 552:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tiempo+0x3>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tiempo>
 560:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tiempo+0x1>
 564:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tiempo+0x2>
 568:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tiempo+0x3>
	if(actualzacionDt++>500){
 56c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <actualzacionDt>
 570:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <actualzacionDt+0x1>
 574:	9c 01       	movw	r18, r24
 576:	2f 5f       	subi	r18, 0xFF	; 255
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <actualzacionDt+0x1>
 57e:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <actualzacionDt>
 582:	85 3f       	cpi	r24, 0xF5	; 245
 584:	91 40       	sbci	r25, 0x01	; 1
 586:	c4 f0       	brlt	.+48     	; 0x5b8 <__vector_7+0x94>
		actualzacionDt=0;
 588:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <actualzacionDt+0x1>
 58c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <actualzacionDt>
		tiempoMedida = tiempo;
 590:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tiempo>
 594:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tiempo+0x1>
 598:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tiempo+0x2>
 59c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tiempo+0x3>
 5a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tiempoMedida>
 5a4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <tiempoMedida+0x1>
 5a8:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <tiempoMedida+0x2>
 5ac:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <tiempoMedida+0x3>
		//calcularDt();
		calcularDtMasTiempo();
 5b0:	0e 94 ab 01 	call	0x356	; 0x356 <calcularDtMasTiempo>
		mostrarDatos();
 5b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mostrarDatos>
	}
}
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <actualizar_vel>:
	velAng = (angulo-prom)*1000; //lo multiplico porque el dt seguro es grande y queda muy chuquito
	dt = tiempoMedida - tiempoMedidaAnt;
	velAng = velAng/dt;
	*/
	
	calcularDt();
 5da:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <calcularDt>
	actualzacionDt = 0;
 5de:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <actualzacionDt+0x1>
 5e2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <actualzacionDt>
	
	
	//actulizo datos
	tiempoMedidaAnt = tiempoMedida;
 5e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tiempoMedida>
 5ea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tiempoMedida+0x1>
 5ee:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <tiempoMedida+0x2>
 5f2:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <tiempoMedida+0x3>
 5f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tiempoMedidaAnt>
 5fa:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tiempoMedidaAnt+0x1>
 5fe:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <tiempoMedidaAnt+0x2>
 602:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <tiempoMedidaAnt+0x3>
	
	/*iPosAng++;
	if (iPosAng>160)iPosAng=4;
	posAng[iPosAng]=angulo;*/
	
	if (angulo != anguloAnt && EspacioDisponibleBuffer()>35)
 606:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <angulo>
 60a:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <angulo+0x1>
 60e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <anguloAnt>
 612:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <anguloAnt+0x1>
 616:	28 17       	cp	r18, r24
 618:	39 07       	cpc	r19, r25
 61a:	31 f0       	breq	.+12     	; 0x628 <actualizar_vel+0x4e>
 61c:	0e 94 4e 04 	call	0x89c	; 0x89c <EspacioDisponibleBuffer>
 620:	84 97       	sbiw	r24, 0x24	; 36
 622:	10 f0       	brcs	.+4      	; 0x628 <actualizar_vel+0x4e>
	{
		mostrarDatos();
 624:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mostrarDatos>
	}
	difAnt = dif;
 628:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <dif>
 62c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <dif+0x1>
 630:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <difAnt+0x1>
 634:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <difAnt>
	anterior = angulo;
 638:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 63c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 640:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <anterior+0x1>
 644:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <anterior>
 648:	08 95       	ret

0000064a <actualizar_MEF>:
		mostrarDatos();
	}
}

void actualizar_MEF(){
	switch(estado){
 64a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	51 f1       	breq	.+84     	; 0x6a6 <actualizar_MEF+0x5c>
 652:	38 f0       	brcs	.+14     	; 0x662 <actualizar_MEF+0x18>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	09 f4       	brne	.+2      	; 0x65a <actualizar_MEF+0x10>
 658:	46 c0       	rjmp	.+140    	; 0x6e6 <actualizar_MEF+0x9c>
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	09 f4       	brne	.+2      	; 0x660 <actualizar_MEF+0x16>
 65e:	63 c0       	rjmp	.+198    	; 0x726 <actualizar_MEF+0xdc>
 660:	82 c0       	rjmp	.+260    	; 0x766 <actualizar_MEF+0x11c>
		case CeroCero:
		if(DER){
 662:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <DER>
 666:	88 23       	and	r24, r24
 668:	61 f0       	breq	.+24     	; 0x682 <actualizar_MEF+0x38>
			angulo--;
 66a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 66e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 678:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = CeroUno;
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
		if (IZQ){
 682:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <IZQ>
 686:	88 23       	and	r24, r24
 688:	09 f4       	brne	.+2      	; 0x68c <actualizar_MEF+0x42>
 68a:	6d c0       	rjmp	.+218    	; 0x766 <actualizar_MEF+0x11c>
			angulo++;
 68c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 690:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 69a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = UnoCero;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 6a4:	60 c0       	rjmp	.+192    	; 0x766 <actualizar_MEF+0x11c>
		}
		break;
		
		case  UnoCero:
		if(DER){
 6a6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <DER>
 6aa:	88 23       	and	r24, r24
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <actualizar_MEF+0x7c>
			angulo++;
 6ae:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 6b2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 6bc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = UnoUno;
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
		if(!IZQ){
 6c6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <IZQ>
 6ca:	81 11       	cpse	r24, r1
 6cc:	4c c0       	rjmp	.+152    	; 0x766 <actualizar_MEF+0x11c>
			angulo--;
 6ce:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 6d2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 6dc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = CeroCero;
 6e0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 6e4:	40 c0       	rjmp	.+128    	; 0x766 <actualizar_MEF+0x11c>
		}
		break;
		
		case CeroUno:
		if(!DER){
 6e6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <DER>
 6ea:	81 11       	cpse	r24, r1
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <actualizar_MEF+0xba>
			angulo++;
 6ee:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 6f2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 6fc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = CeroCero;
 700:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		}
		if(IZQ){
 704:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <IZQ>
 708:	88 23       	and	r24, r24
 70a:	69 f1       	breq	.+90     	; 0x766 <actualizar_MEF+0x11c>
			angulo--;
 70c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 710:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 71a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = UnoUno;
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 724:	20 c0       	rjmp	.+64     	; 0x766 <actualizar_MEF+0x11c>
		}
		break;
		
		case UnoUno:
		if(!DER){
 726:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <DER>
 72a:	81 11       	cpse	r24, r1
 72c:	0c c0       	rjmp	.+24     	; 0x746 <actualizar_MEF+0xfc>
			angulo--;
 72e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 732:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 73c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = UnoCero;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
		if(!IZQ){
 746:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <IZQ>
 74a:	81 11       	cpse	r24, r1
 74c:	0c c0       	rjmp	.+24     	; 0x766 <actualizar_MEF+0x11c>
			angulo++;
 74e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 752:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <angulo+0x1>
 75c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <angulo>
			estado = CeroUno;
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
		break;
	}
	
		tiempoMedida = tiempo;
 766:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tiempo>
 76a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tiempo+0x1>
 76e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tiempo+0x2>
 772:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tiempo+0x3>
 776:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tiempoMedida>
 77a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <tiempoMedida+0x1>
 77e:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <tiempoMedida+0x2>
 782:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <tiempoMedida+0x3>
		
				
		actualizar_vel();
 786:	0e 94 ed 02 	call	0x5da	; 0x5da <actualizar_vel>
		anguloAnt = angulo;
 78a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <angulo>
 78e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <angulo+0x1>
 792:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <anguloAnt+0x1>
 796:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <anguloAnt>
 79a:	08 95       	ret

0000079c <__vector_2>:
		AgregarDatoBuffer('\0');
	}
}


ISR(INT1_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
	//leo el puerto y actualizo
	IZQAct = LEERIZQ;
 7be:	89 b1       	in	r24, 0x09	; 9
 7c0:	88 70       	andi	r24, 0x08	; 8
 7c2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <IZQAct>
	DERAct = LEERDER;
 7c6:	89 b1       	in	r24, 0x09	; 9
 7c8:	84 70       	andi	r24, 0x04	; 4
 7ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <DERAct>
	
	IZQ = IZQAct;	
 7ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <IZQAct>
 7d2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <IZQ>
	DER = DERAct;
 7d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <DERAct>
 7da:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <DER>
	
//	AgregarDatoBuffer('I');
//	AgregarDatoBuffer('\0');
	
	actualizar_MEF();
 7de:	0e 94 25 03 	call	0x64a	; 0x64a <actualizar_MEF>
	
	HayDato=1;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <HayDato>
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__vector_1>:

//sensor derecho
ISR(INT0_vect){
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	IZQAct = LEERIZQ;
 82c:	89 b1       	in	r24, 0x09	; 9
 82e:	88 70       	andi	r24, 0x08	; 8
 830:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <IZQAct>
	DERAct = LEERDER;
 834:	89 b1       	in	r24, 0x09	; 9
 836:	84 70       	andi	r24, 0x04	; 4
 838:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <DERAct>
	
	IZQ = IZQAct;
 83c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <IZQAct>
 840:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <IZQ>
	DER = DERAct;
 844:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <DERAct>
 848:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <DER>
	
//	AgregarDatoBuffer('D');
//	AgregarDatoBuffer('\0');
	actualizar_MEF();
 84c:	0e 94 25 03 	call	0x64a	; 0x64a <actualizar_MEF>
	
	HayDato=1;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <HayDato>
 856:	ff 91       	pop	r31
 858:	ef 91       	pop	r30
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <Inicializacion_UART>:
		RxTail = (RxTail + 1) % BUFFER_SIZE_RX;
		i++;
	}
	sei(); // Habilitar interrupciones nuevamente
	datos[i] = '\0';
}
 878:	86 e0       	ldi	r24, 0x06	; 6
 87a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 87e:	83 e3       	ldi	r24, 0x33	; 51
 880:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 884:	e1 ec       	ldi	r30, 0xC1	; 193
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	80 61       	ori	r24, 0x10	; 16
 88c:	80 83       	st	Z, r24
 88e:	80 81       	ld	r24, Z
 890:	80 68       	ori	r24, 0x80	; 128
 892:	80 83       	st	Z, r24
 894:	80 81       	ld	r24, Z
 896:	88 60       	ori	r24, 0x08	; 8
 898:	80 83       	st	Z, r24
 89a:	08 95       	ret

0000089c <EspacioDisponibleBuffer>:
 89c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TxHead>
 8a0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TxTail>
 8a4:	98 17       	cp	r25, r24
 8a6:	60 f0       	brcs	.+24     	; 0x8c0 <EspacioDisponibleBuffer+0x24>
 8a8:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <TxHead>
 8ac:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TxTail>
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	28 1b       	sub	r18, r24
 8b4:	31 09       	sbc	r19, r1
 8b6:	8e ef       	ldi	r24, 0xFE	; 254
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	82 1b       	sub	r24, r18
 8bc:	93 0b       	sbc	r25, r19
 8be:	08 95       	ret
 8c0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TxTail>
 8c4:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <TxHead>
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	82 1b       	sub	r24, r18
 8cc:	91 09       	sbc	r25, r1
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	08 95       	ret

000008d2 <AgregarDatoBuffer>:
 8d2:	28 2f       	mov	r18, r24
 8d4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <TxHead>
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	6f ef       	ldi	r22, 0xFF	; 255
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	0e 94 19 05 	call	0xa32	; 0xa32 <__divmodhi4>
 8e4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <TxTail>
 8e8:	98 17       	cp	r25, r24
 8ea:	69 f0       	breq	.+26     	; 0x906 <__stack+0x7>
 8ec:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <TxHead>
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	e0 5d       	subi	r30, 0xD0	; 208
 8f4:	fe 4f       	sbci	r31, 0xFE	; 254
 8f6:	20 83       	st	Z, r18
 8f8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <TxHead>
 8fc:	e1 ec       	ldi	r30, 0xC1	; 193
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	80 62       	ori	r24, 0x20	; 32
 904:	80 83       	st	Z, r24
 906:	08 95       	ret

00000908 <AgregarDatosBuffer>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	8c 01       	movw	r16, r24
 910:	c0 e0       	ldi	r28, 0x00	; 0
 912:	03 c0       	rjmp	.+6      	; 0x91a <AgregarDatosBuffer+0x12>
 914:	0e 94 69 04 	call	0x8d2	; 0x8d2 <AgregarDatoBuffer>
 918:	cf 5f       	subi	r28, 0xFF	; 255
 91a:	f8 01       	movw	r30, r16
 91c:	ec 0f       	add	r30, r28
 91e:	f1 1d       	adc	r31, r1
 920:	80 81       	ld	r24, Z
 922:	81 11       	cpse	r24, r1
 924:	f7 cf       	rjmp	.-18     	; 0x914 <AgregarDatosBuffer+0xc>
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <__vector_19>:
 92e:	1f 92       	push	r1
 930:	0f 92       	push	r0
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	0f 92       	push	r0
 936:	11 24       	eor	r1, r1
 938:	5f 93       	push	r21
 93a:	6f 93       	push	r22
 93c:	7f 93       	push	r23
 93e:	8f 93       	push	r24
 940:	9f 93       	push	r25
 942:	af 93       	push	r26
 944:	bf 93       	push	r27
 946:	ef 93       	push	r30
 948:	ff 93       	push	r31
 94a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TxHead>
 94e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TxTail>
 952:	98 17       	cp	r25, r24
 954:	99 f0       	breq	.+38     	; 0x97c <__vector_19+0x4e>
 956:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <TxTail>
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	e0 5d       	subi	r30, 0xD0	; 208
 95e:	fe 4f       	sbci	r31, 0xFE	; 254
 960:	80 81       	ld	r24, Z
 962:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 966:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TxTail>
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	6f ef       	ldi	r22, 0xFF	; 255
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	0e 94 19 05 	call	0xa32	; 0xa32 <__divmodhi4>
 976:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <TxTail>
 97a:	05 c0       	rjmp	.+10     	; 0x986 <__vector_19+0x58>
 97c:	e1 ec       	ldi	r30, 0xC1	; 193
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	8f 7d       	andi	r24, 0xDF	; 223
 984:	80 83       	st	Z, r24
 986:	ff 91       	pop	r31
 988:	ef 91       	pop	r30
 98a:	bf 91       	pop	r27
 98c:	af 91       	pop	r26
 98e:	9f 91       	pop	r25
 990:	8f 91       	pop	r24
 992:	7f 91       	pop	r23
 994:	6f 91       	pop	r22
 996:	5f 91       	pop	r21
 998:	0f 90       	pop	r0
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	0f 90       	pop	r0
 99e:	1f 90       	pop	r1
 9a0:	18 95       	reti

000009a2 <__vector_18>:

ISR(USART_RX_vect){
 9a2:	1f 92       	push	r1
 9a4:	0f 92       	push	r0
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	0f 92       	push	r0
 9aa:	11 24       	eor	r1, r1
 9ac:	2f 93       	push	r18
 9ae:	5f 93       	push	r21
 9b0:	6f 93       	push	r22
 9b2:	7f 93       	push	r23
 9b4:	8f 93       	push	r24
 9b6:	9f 93       	push	r25
 9b8:	af 93       	push	r26
 9ba:	bf 93       	push	r27
 9bc:	ef 93       	push	r30
 9be:	ff 93       	push	r31
	uint8_t newRxHead = (RxHead + 1) % BUFFER_SIZE_RX;
 9c0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <RxHead>
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	6f ef       	ldi	r22, 0xFF	; 255
 9ca:	70 e0       	ldi	r23, 0x00	; 0
 9cc:	0e 94 19 05 	call	0xa32	; 0xa32 <__divmodhi4>
	uint8_t receivedChar = UDR0;
 9d0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (newRxHead != RxTail) {
 9d4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <RxTail>
 9d8:	98 17       	cp	r25, r24
 9da:	41 f0       	breq	.+16     	; 0x9ec <__vector_18+0x4a>
		BufferRX[RxHead] = receivedChar;
 9dc:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <RxHead>
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	e1 5d       	subi	r30, 0xD1	; 209
 9e4:	fd 4f       	sbci	r31, 0xFD	; 253
 9e6:	20 83       	st	Z, r18
		RxHead = newRxHead;
 9e8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <RxHead>
	}
}
 9ec:	ff 91       	pop	r31
 9ee:	ef 91       	pop	r30
 9f0:	bf 91       	pop	r27
 9f2:	af 91       	pop	r26
 9f4:	9f 91       	pop	r25
 9f6:	8f 91       	pop	r24
 9f8:	7f 91       	pop	r23
 9fa:	6f 91       	pop	r22
 9fc:	5f 91       	pop	r21
 9fe:	2f 91       	pop	r18
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	0f 90       	pop	r0
 a06:	1f 90       	pop	r1
 a08:	18 95       	reti

00000a0a <__udivmodhi4>:
 a0a:	aa 1b       	sub	r26, r26
 a0c:	bb 1b       	sub	r27, r27
 a0e:	51 e1       	ldi	r21, 0x11	; 17
 a10:	07 c0       	rjmp	.+14     	; 0xa20 <__udivmodhi4_ep>

00000a12 <__udivmodhi4_loop>:
 a12:	aa 1f       	adc	r26, r26
 a14:	bb 1f       	adc	r27, r27
 a16:	a6 17       	cp	r26, r22
 a18:	b7 07       	cpc	r27, r23
 a1a:	10 f0       	brcs	.+4      	; 0xa20 <__udivmodhi4_ep>
 a1c:	a6 1b       	sub	r26, r22
 a1e:	b7 0b       	sbc	r27, r23

00000a20 <__udivmodhi4_ep>:
 a20:	88 1f       	adc	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	5a 95       	dec	r21
 a26:	a9 f7       	brne	.-22     	; 0xa12 <__udivmodhi4_loop>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	bc 01       	movw	r22, r24
 a2e:	cd 01       	movw	r24, r26
 a30:	08 95       	ret

00000a32 <__divmodhi4>:
 a32:	97 fb       	bst	r25, 7
 a34:	07 2e       	mov	r0, r23
 a36:	16 f4       	brtc	.+4      	; 0xa3c <__divmodhi4+0xa>
 a38:	00 94       	com	r0
 a3a:	07 d0       	rcall	.+14     	; 0xa4a <__divmodhi4_neg1>
 a3c:	77 fd       	sbrc	r23, 7
 a3e:	09 d0       	rcall	.+18     	; 0xa52 <__divmodhi4_neg2>
 a40:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodhi4>
 a44:	07 fc       	sbrc	r0, 7
 a46:	05 d0       	rcall	.+10     	; 0xa52 <__divmodhi4_neg2>
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__divmodhi4_exit>

00000a4a <__divmodhi4_neg1>:
 a4a:	90 95       	com	r25
 a4c:	81 95       	neg	r24
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	08 95       	ret

00000a52 <__divmodhi4_neg2>:
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255

00000a58 <__divmodhi4_exit>:
 a58:	08 95       	ret

00000a5a <__udivmodsi4>:
 a5a:	a1 e2       	ldi	r26, 0x21	; 33
 a5c:	1a 2e       	mov	r1, r26
 a5e:	aa 1b       	sub	r26, r26
 a60:	bb 1b       	sub	r27, r27
 a62:	fd 01       	movw	r30, r26
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__udivmodsi4_ep>

00000a66 <__udivmodsi4_loop>:
 a66:	aa 1f       	adc	r26, r26
 a68:	bb 1f       	adc	r27, r27
 a6a:	ee 1f       	adc	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	a2 17       	cp	r26, r18
 a70:	b3 07       	cpc	r27, r19
 a72:	e4 07       	cpc	r30, r20
 a74:	f5 07       	cpc	r31, r21
 a76:	20 f0       	brcs	.+8      	; 0xa80 <__udivmodsi4_ep>
 a78:	a2 1b       	sub	r26, r18
 a7a:	b3 0b       	sbc	r27, r19
 a7c:	e4 0b       	sbc	r30, r20
 a7e:	f5 0b       	sbc	r31, r21

00000a80 <__udivmodsi4_ep>:
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	1a 94       	dec	r1
 a8a:	69 f7       	brne	.-38     	; 0xa66 <__udivmodsi4_loop>
 a8c:	60 95       	com	r22
 a8e:	70 95       	com	r23
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	9b 01       	movw	r18, r22
 a96:	ac 01       	movw	r20, r24
 a98:	bd 01       	movw	r22, r26
 a9a:	cf 01       	movw	r24, r30
 a9c:	08 95       	ret

00000a9e <__divmodsi4>:
 a9e:	05 2e       	mov	r0, r21
 aa0:	97 fb       	bst	r25, 7
 aa2:	1e f4       	brtc	.+6      	; 0xaaa <__divmodsi4+0xc>
 aa4:	00 94       	com	r0
 aa6:	0e 94 66 05 	call	0xacc	; 0xacc <__negsi2>
 aaa:	57 fd       	sbrc	r21, 7
 aac:	07 d0       	rcall	.+14     	; 0xabc <__divmodsi4_neg2>
 aae:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodsi4>
 ab2:	07 fc       	sbrc	r0, 7
 ab4:	03 d0       	rcall	.+6      	; 0xabc <__divmodsi4_neg2>
 ab6:	4e f4       	brtc	.+18     	; 0xaca <__divmodsi4_exit>
 ab8:	0c 94 66 05 	jmp	0xacc	; 0xacc <__negsi2>

00000abc <__divmodsi4_neg2>:
 abc:	50 95       	com	r21
 abe:	40 95       	com	r20
 ac0:	30 95       	com	r19
 ac2:	21 95       	neg	r18
 ac4:	3f 4f       	sbci	r19, 0xFF	; 255
 ac6:	4f 4f       	sbci	r20, 0xFF	; 255
 ac8:	5f 4f       	sbci	r21, 0xFF	; 255

00000aca <__divmodsi4_exit>:
 aca:	08 95       	ret

00000acc <__negsi2>:
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	08 95       	ret

00000adc <__umulhisi3>:
 adc:	a2 9f       	mul	r26, r18
 ade:	b0 01       	movw	r22, r0
 ae0:	b3 9f       	mul	r27, r19
 ae2:	c0 01       	movw	r24, r0
 ae4:	a3 9f       	mul	r26, r19
 ae6:	70 0d       	add	r23, r0
 ae8:	81 1d       	adc	r24, r1
 aea:	11 24       	eor	r1, r1
 aec:	91 1d       	adc	r25, r1
 aee:	b2 9f       	mul	r27, r18
 af0:	70 0d       	add	r23, r0
 af2:	81 1d       	adc	r24, r1
 af4:	11 24       	eor	r1, r1
 af6:	91 1d       	adc	r25, r1
 af8:	08 95       	ret

00000afa <__mulshisi3>:
 afa:	b7 ff       	sbrs	r27, 7
 afc:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__muluhisi3>

00000b00 <__mulohisi3>:
 b00:	0e 94 85 05 	call	0xb0a	; 0xb0a <__muluhisi3>
 b04:	82 1b       	sub	r24, r18
 b06:	93 0b       	sbc	r25, r19
 b08:	08 95       	ret

00000b0a <__muluhisi3>:
 b0a:	0e 94 6e 05 	call	0xadc	; 0xadc <__umulhisi3>
 b0e:	a5 9f       	mul	r26, r21
 b10:	90 0d       	add	r25, r0
 b12:	b4 9f       	mul	r27, r20
 b14:	90 0d       	add	r25, r0
 b16:	a4 9f       	mul	r26, r20
 b18:	80 0d       	add	r24, r0
 b1a:	91 1d       	adc	r25, r1
 b1c:	11 24       	eor	r1, r1
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
